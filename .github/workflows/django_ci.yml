name: Django CI Check

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  PYTHON_VERSION: "3.11"
  VENV_DIR: ".venv"

jobs:
  setup:
    name: Setup and cache venv
    runs-on: ubuntu-latest
    outputs:
      venv-key: ${{ steps.venv-cache.outputs.cache-primary-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache full virtual environment
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.VENV_DIR }}
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Create and install into venv (if not cached)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv ${{ env.VENV_DIR }}
          source ${{ env.VENV_DIR }}/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage  # all jobs will use this

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore venv from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.VENV_DIR }}
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Run flake8
        run: |
          source ${{ env.VENV_DIR }}/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  migrate:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore venv from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.VENV_DIR }}
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Run migrations
        run: |
          source ${{ env.VENV_DIR }}/bin/activate
          python manage.py makemigrations --noinput
          python manage.py migrate --noinput

  test:
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore venv from cache
        uses: actions/cache@v4
        with:
          path: ${{ env.VENV_DIR }}
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Run tests with coverage
        env:
          DJANGO_SECRET_KEY: "dummy-test-secret"
        run: |
          source ${{ env.VENV_DIR }}/bin/activate
          coverage run manage.py test
          coverage report --fail-under=80
          coverage xml

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload coverage to GitHub summary
        if: always()
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          source ${{ env.VENV_DIR }}/bin/activate
          coverage report >> $GITHUB_STEP_SUMMARY
